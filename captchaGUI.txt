#Cody Regalado
#10/12/18
#CST 205
#This program opens a GUI window for a user to interact with, where they can use a search label
#and a choice of a filter to find an image, and give it a filter all in one push of a button.

import sys, math
from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton,
                                QLineEdit, QHBoxLayout, QVBoxLayout, QComboBox)
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import QPixmap
from PIL import Image

my_list = ['None','Sepia','Negative','Grayscale','Thumbnail']

def sepia(picture):
	pic = Image.open(picture)
	width, height = pic.size
	mode = pic.mode
	temp_list = []
	pic_data = grayscale(picture)
	
	for p in pic.getdata():
		if p[0] < 63:
			red_val = int(p[0] * 1.1)
			green_val = p[1]
			blue_val = int(p[2] * 0.85)
			
		if p[0] > 62 and p[0] < 192:
			red_val = int(p[0] * 1.15)
			green_val = p[1]
			blue_val = int(p[2] * 0.85)
		
		if p[0] > 191:
			red_val = int(p[0] * 1.08)
			if red_val > 255:
				red_val = 255
			green_val = p[1]
			blue_val = int(p[2] * 0.5)
		temp_list.append((red_val,green_val,blue_val))
		
	pic.putdata(temp_list)
	pic.save("tempImage.jpg")

def negative(picture):
	pic = Image.open(picture)
	width, height = pic.size
	mode = pic.mode
	new_list = []
	for p in pic.getdata():
		temp = (255-p[0],255-p[1],255-p[2])
		new_list.append(temp)
	pic.putdata(new_list)
	pic.save("tempImage.jpg")

def grayscale(picture):
	pic = Image.open(picture)
	width, height = pic.size
	mode = pic.mode
	new_list = []
	
	for p in pic.getdata():
		new_red = int(p[0] * 0.299)
		new_green = int(p[1] * 0.587)
		new_blue = int(p[2] * 0.114)
		luminance = new_red + new_green + new_blue
		temp = (luminance,luminance,luminance)
		new_list.append(temp)
	pic.putdata(new_list)
	pic.save("tempImage.jpg")
	
	return pic

def thumbnail(picture):
	pic = Image.open(picture)
	width, height = pic.size
	mode = pic.mode
	s = 2
	canvas = Image.new("RGB", (math.ceil(pic.width/s), math.ceil(pic.height/s)), "white")
	target_x = 0
	for source_x in range(0, pic.width, s):
		target_y = 0
		for source_y in range(0, pic.height, s):
			color = pic.getpixel((source_x, source_y))
			canvas.putpixel((target_x, target_y), color)
			target_y += 1
		target_x += 1
	canvas.save("tempImage.jpg")

class Window(QWidget):
	def __init__(self):
		super().__init__()
		self.reset_label = None
		self.init_ui()
		
	def init_ui(self):
		#Labels that we are going to use in our Gui
		self.searchLabel = QLabel("Search: ")
		self.imageType = QLabel("Image Type:")
		self.empty = QLabel("")
		self.reset_label = QLabel()#this will be the Label containing the pixmap for our function output
		
		#objects for the v_layout1
		self.my_combo_box = QComboBox()
		self.my_combo_box.addItems(my_list)
		self.lineEdit = QLineEdit()
		self.searchButton = QPushButton("Enhanced Search", self)

		#object for v_layout2
		reset_image = QPixmap("search.jpeg")
		
		main_layout = QHBoxLayout()
		
		#create v_layout
		v_layout = QVBoxLayout()
		v_layout.addWidget(self.searchLabel)
		v_layout.addWidget(self.imageType)
		v_layout.addWidget(self.empty)
		
		#create v_layout1
		v_layout1 = QVBoxLayout()
		v_layout1.addWidget(self.lineEdit)
		v_layout1.addWidget(self.my_combo_box)
		v_layout1.addWidget(self.searchButton)
		
		#create v_layout2
		v_layout2 = QHBoxLayout()
		v_layout2.addWidget(self.reset_label)
		self.reset_label.setPixmap(reset_image)
		
		#add all the v_layout's to our main_layout
		main_layout.addLayout(v_layout)
		main_layout.addLayout(v_layout1)
		main_layout.addLayout(v_layout2)

		#print the gui in the layout
		self.setLayout(main_layout)

		#update the combo box based on the user's choice
		self.my_combo_box.currentIndexChanged.connect(self.update_ui)
		
		self.searchButton.clicked.connect(self.on_click)
		
	@pyqtSlot()
	def on_click(self):
		maxMatch = 0
		match = 0
		match_id = " "
		match_title = " "
		
		words = self.lineEdit.text()
		search_word = words.split(' ')
	
		for item in image_info:
			for word in search_word:
				if (word.lower == item['title'].lower()):
					match += 1
				for letters in item['tags']:
					if (word.lower() == letters.lower()):
						match += 1
				if(match > maxMatch):
					maxMatch = match
					match_title = item['title'].lower()
					match_id = item['id']
				if(maxMatch > 0):
					if(maxMatch == match):
						temp1 = item['title'].lower()
						temp2 = word.lower()
					if(temp2 > temp1):
						match_id = item['id']
						match_title = item['title']
				match = 0
				
			choice = self.my_combo_box.currentIndex()
			if(maxMatch > 0):

				if choice is 1:
					sepia(match_id+'.jpg')
					self.update_image(QPixmap("tempImage.jpg"))
				elif choice is 2:
					negative(match_id+'.jpg')
					self.update_image(QPixmap("tempImage.jpg"))
				elif choice is 3:
					grayscale(match_id+'.jpg')
					self.update_image(QPixmap("tempImage.jpg"))
				elif choice is 4:
					thumbnail(match_id+'.jpg')
					self.update_image(QPixmap("tempImage.jpg"))
				else:
					reset_image = QPixmap(match_id+'.jpg')
					self.update_image(reset_image)
		self.setWindowTitle("Enhanced Image Search")
		
	@pyqtSlot()
	def update_ui(self):
		my_text = self.my_combo_box.currentText()
		print(my_text)
		
	@pyqtSlot()
	def update_image(self, reset_image):
		self.reset_label.setPixmap(reset_image)
		
app = QApplication(sys.argv)
main = Window()
main.show()
sys.exit(app.exec_())